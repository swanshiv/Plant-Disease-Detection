# -*- coding: utf-8 -*-
"""starter_code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FDW879U1v7Pq69O_2CtpZsHRhKUr8Qxg
"""

# here we are working on Tensorflow version 2.1.0 so we need to write tensorflow.keras.
#keras is in built function in Tensorflow .

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Dense, Input, Dropout,Flatten, Conv2D, BatchNormalization, Activation, MaxPooling2D
from tensorflow.keras.models import Model, Sequential
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau
from tensorflow.keras.utils import plot_model
from IPython.display import SVG, Image

def train_leaf_doctor(no_of_species):
    
    detection=Sequential()

    #convolutional layer-1
    detection.add(Conv2D(64,(3,3),padding='same',input_shape=(48,48,3)))
    detection.add(BatchNormalization())
    detection.add(Activation('relu'))
    detection.add(MaxPooling2D(pool_size=(2,2)))
    detection.add(Dropout(0.25))

    #2 -convolutional layer-2
    detection.add(Conv2D(128,(5,5),padding='same'))
    detection.add(BatchNormalization())
    detection.add(Activation('relu'))
    detection.add(MaxPooling2D(pool_size=(2,2)))
    detection.add(Dropout(0.25))

    #3 -convolutional layer-3
    detection.add(Conv2D(256,(3,3),padding='same'))
    detection.add(BatchNormalization())
    detection.add(Activation('relu'))
    detection.add(MaxPooling2D(pool_size=(2,2)))
    detection.add(Dropout(0.25))

    #4 -convolutional layer-4
    detection.add(Conv2D(512,(3,3),padding='same'))
    detection.add(BatchNormalization())
    detection.add(Activation('relu'))
    detection.add(MaxPooling2D(pool_size=(2,2)))
    detection.add(Dropout(0.25))

    #5 -convolutional layer-5
    detection.add(Conv2D(512,(3,3),padding='same'))
    detection.add(BatchNormalization())
    detection.add(Activation('relu'))
    detection.add(MaxPooling2D(pool_size=(2,2)))
    detection.add(Dropout(0.25))

    detection.add(Flatten())
    detection.add(Dense(256))
    detection.add(BatchNormalization())
    detection.add(Activation('relu'))
    detection.add(Dropout(0.25))

    detection.add(Dense(512))
    detection.add(BatchNormalization())
    detection.add(Activation('relu'))
    detection.add(Dropout(0.25))

    detection.add(Dense(no_of_species,activation='softmax'))
    optimum=Adam(lr=0.005)
    #lr-learning rate
    detection.compile(optimizer=optimum,loss='categorical_crossentropy',metrics=['accuracy'])

    detection.summary()

    return detection

def step_data(img_size, batch_size, train_path, test_path):
    datagen_train=ImageDataGenerator(horizontal_flip=True)
    train_generator=datagen_train.flow_from_directory(train_path,
    target_size=(img_size,img_size),
    batch_size=batch_size,
    class_mode='categorical',
    shuffle=True)

    datagen_test=ImageDataGenerator(horizontal_flip=True)
    validation_generator=datagen_test.flow_from_directory(test_path,
    target_size=(img_size,img_size),
    batch_size=batch_size,
    class_mode='categorical',
    shuffle=True)

    return train_generator, validation_generator